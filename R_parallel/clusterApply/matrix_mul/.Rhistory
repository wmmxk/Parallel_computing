library(parallel)
c2 = makePSOCKcluster(rep("localhost",2))
a = matrix( sample(1:50, 16, replace = T), ncol =2 )
b = c(5,-2)
mmul = function (cls, u,v )
{
rowgrps = splitIndices(nrow(u), length(cls))
grpmul = function(grp) u[grp,] %*% v
mout = clusterApply(cls, rowgrps, grpmul)
Reduce(c,mout)
}
clusterExport(c2,c('a','b'))
clusterEvalQ(c2,b)
mmul(c2,a,b) #the two variable can be passed as argument if they are made visible by clusterExport
library(parallel)
c2 = makePSOCKcluster(rep("localhost",2))
a = matrix( sample(1:50, 16, replace = T), ncol =2 )
b = c(5,-2)
mmul = function (cls, u,v )
{
rowgrps = splitIndices(nrow(u), length(cls))
grpmul = function(grp) u[grp,] %*% v
mout = clusterApply(cls, rowgrps, grpmul)
Reduce(c,mout)
}
mmul(c2,a,b) #the two variable can be passed as argument if they are made visible by clusterExport
myvec = seq(1,n,1)
n =10
myvec = seq(1,n,1)
myvec/2
library(parallel)
cls <- makePSOCKcluster(rep("localhost",2))
n =10
par_search = function(cls,data,divisor) {
rowgrps <- splitIndices(length(data), length(cls))
grpsearch  <- function(grp) {
data = data/divisor
return(sum(data[grp]==1))
}
mout <- clusterApply(cls, rowgrps, grpsearch)
Reduce(c, mout)
}
myvec = seq(1,n,1)
par_search(cls,myvec)
myvec = seq(1,n,1)
mydivisor = 2
par_search(cls,myvec,mydivisor)
library(parallel)
cls <- makePSOCKcluster(rep("localhost",2))
n =10
par_search = function(cls,data,divisor) {
rowgrps <- splitIndices(length(data), length(cls))
grpsearch  <- function(grp) {
data = data/divisor
return(sum(data[grp]==1))
}
mout <- clusterApply(cls, rowgrps, grpsearch)
Reduce(c, mout)
}
myvec = seq(1,n,1)
mydivisor = 2
par_search(cls,myvec,mydivisor)
myvec
par_search(cls,myvec,2)
par_search(cls,myvec,mydivisor)
clusterExport(c2,c('mydivisor'))
par_search(cls,myvec,mydivisor)
clusterExport(cls,c('mydivisor'))
par_search(cls,myvec,mydivisor)
x=c(1,2)
x[1] <-2
x
x[1] <-5
x
x[1] <- 6
x
x[1] < -7
# This codes is experiment on the clusterExport function. It seems the first argument don't have
# to be exported
library(parallel)
cls <- makePSOCKcluster(rep("localhost",2))
count_one <- function(vec) {return(sum(data[grp]==1))}
count_one(myvec)
n =10
myvec = seq(1,n,1)
mydivisor = 2
count_one(myvec)
count_one <- function(vec) {return(sum(vec==1))}
count_one(myvec)
n =10
myvec = seq(1,n,1)
mydivisor = 2
n =10
myvec = seq(1,n,1)
mydivisor = 2
par_search = function(cls,data,divisor) {
rowgrps <- splitIndices(length(data), length(cls))
grpsearch  <- function(grp) {
data = data/divisor
return(count_one(data[grp]))
}
mout <- clusterApply(cls, rowgrps, grpsearch)
Reduce(c, mout)
}
# why is it OK if do not export the variable
clusterExport(cls,c('mydivisor'))
par_search(cls,myvec,mydivisor)
# why is it OK if do not export the variable
clusterExport(cls,c('mydivisor','count_one'))
par_search(cls,myvec,mydivisor)
