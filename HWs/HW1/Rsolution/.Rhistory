q()
install.packages("e1071")
install.packages("DESeq")
R.version
R.version
install.packages("DESeq")
install.packages("DESeq2")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
source("https://bioconductor.org/biocLite.R")
install.packages("data.table")
install.packages("forecast")
install.packages("foreach")
install.packages("doParallel")
install.packages("iterators")
install.packages("~/R/Packages/doParallel_1.0.10.tar.gz", repos = NULL, type="source")
library(parallel)
data =  read.table("../data/twitter_combined.txt", sep = " ")
data = data.matrix(data)
data = data[order(data[,1]),]
setwd("~/tmp/Parallel-Processing/R_solution/src")
library(parallel)
data =  read.table("../data/twitter_combined.txt", sep = " ")
data = data.matrix(data)
data = data[order(data[,1]),]
head(data)
library(parallel)
data =  read.table("../data/twitter_combined.txt", sep = " ")
data = data.matrix(data)
recippar <- function (data) {
data = data[order(data[,1]),]
reflexive_num = sum(data[,1]==data[,2])
cls <- makePSOCKcluster(rep("localhost",6))
par_search = function(cls,data) {
rowgrps <- splitIndices(nrow(data), length(cls))
N = nrow(data)
col1= unlist(data[,1])
bin_search <- function( arr, l, r, x){
if (r>=l) {
mid = l+(r-l)%/%2
if(arr[mid] == x) return(mid)
if (arr[mid] > x)
return(bin_search(arr, l, mid-1, x))
return(bin_search(arr, mid+1,r,x))
}
return(-1)
}
# the work function search a groups rows for reciprocal eges in all the rows
# when searching, the second node is seared by binary_search first and
# then a local bidrectional search is conducted.
grpsearch  <- function(grp) {
score = 0
for (i in grp)
{
row = unlist(data[i,])
index = bin_search(col1,1,N,row[2])
if (index!=-1) {
found = FALSE
i = index
while (col1[i] == row[2] && i > 0) {
if (data[i,2] == row[1]) {
score = score +1
found = TRUE
break
}
i = i-1
}
if (!found) {
i=index+1
while (col1[i] == row[2] && i <=N) {
if (data[i,2] == row[1]) {
score = score +1
break
}
i = i+1
}
}
}
}
return(score)
}
# apply the work functions on the split rows
mout <- clusterApply(cls, rowgrps, grpsearch)
Reduce(c, mout)
}
ptm<-proc.time()
scores = par_search(cls,data)
print(proc.time() - ptm)
res = (sum(scores)-reflexive_num)/2
return(res)
}
res = recippar(data)
res
library(parallel)
c2 = makePSOCKcluster(rep("localhost",2))
mmul = function (cls, u,v )
{
rowgrps = splitIndices(nrow(u), length(cls))
grpmul = function(grp) u[grp,] %*% v
mout = clusterApply(cls, rowgrps, grpmul)
Reduce(c,mout)
}
a = matrix( sample(1:50, 16, replace = T), ncol =2 )
a
b
b = c(5,-2)
mmul(c2,a,b)
?clusterExport
library(parallel)
cls <- makePSOCKcluster(rep("localhost",2))
n =10
myvec = seq(1,n,1)
par_search = function(cls,data) {
rowgrps <- splitIndices(length(data), length(cls))
grpsearch  <- function(grp)
{
return(sum(data[grp]==1))
}
mout <- clusterApply(cls, rowgrps, grpsearch)
Reduce(c, mout)
}
par_search(cls,myvec)
library(parallel)
cls <- makePSOCKcluster(rep("localhost",2))
n =10
par_search = function(cls,data) {
rowgrps <- splitIndices(length(data), length(cls))
grpsearch  <- function(grp)
{
return(sum(data[grp]==1))
}
mout <- clusterApply(cls, rowgrps, grpsearch)
Reduce(c, mout)
}
myvec = seq(1,n,1)
par_search(cls,myvec)
library(parallel)
c2 = makePSOCKcluster(rep("localhost",2))
mmul = function (cls, u,v )
{
rowgrps = splitIndices(nrow(u), length(cls))
grpmul = function(grp) u[grp,] %*% v
mout = clusterApply(cls, rowgrps, grpmul)
Reduce(c,mout)
}
a = matrix( sample(1:50, 16, replace = T), ncol =2 )
mmul(c2,a,b) //the two variable can be passed as argument if they are made visible by clusterExport
mmul(c2,a,b) #the two variable can be passed as argument if they are made visible by clusterExport
clusterExport(c2,c('a'))
b
a = matrix( sample(1:50, 16, replace = T), ncol =2 )
b = c(5,-2)
clusterExport(c2,c('a'))
mmul(c2,a,b) #the two variable can be passed as argument if they are made visible by clusterExport
library(parallel)
c2 = makePSOCKcluster(rep("localhost",2))
a = matrix( sample(1:50, 16, replace = T), ncol =2 )
b = c(5,-2)
mmul = function (cls, u,v )
{
rowgrps = splitIndices(nrow(u), length(cls))
grpmul = function(grp) u[grp,] %*% v
mout = clusterApply(cls, rowgrps, grpmul)
Reduce(c,mout)
}
clusterExport(c2,c('a'))
clusterExport(c2,c('a','b'))
clusterEvalQ(c2,b)
mmul(c2,a,b) #the two variable can be passed as argument if they are made visible by clusterExport
